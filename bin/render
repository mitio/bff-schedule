#!/usr/bin/env ruby
# encoding: utf-8

require 'rubygems'
require 'bundler/setup'
require 'prawn'
require_relative '../helpers'
require_relative '../schedule'

if ARGV.size < 2
  puts "Usage: #{__FILE__} path-to-schedule.csv path-to-output.pdf"
  exit 1
end

input_file, output_file = ARGV
schedule = Schedule.new input_file
root_path = File.expand_path('../..', __FILE__)

# Settings
font_path = "#{root_path}/fonts/Helvetica.dfont"
main_font = 'Helvetica'

hour_height         = 24
hour_column_width   = 40
event_column_width  = 150
min_event_height    = 12
column_spacing      = 10
event_padding       = 1
main_text_color     = '333131'
hours_color         = '555353'
hour_lines_color    = 'DDD9D8'
columns_left        = 35
narrow_column_width = 67
print_margins       = 10
print_border_color  = 'CCCCCC'
event_columns       = {
  -> event { event.location == 'Тържествена зала' } => {
    background_color: 'EFACB2',
    text_color: 'B71C16',
    left: columns_left,
    width: narrow_column_width,
    legend_name: 'Тържествена зала на читалище "Н. Й. Вапцаров"',
  },
  -> event { event.location == 'Заседателна зала' } => {
    background_color: 'C0FCC3',
    text_color: '388712',
    left: columns_left + narrow_column_width + column_spacing,
    width: narrow_column_width,
    legend_name: 'Заседателна зала на читалище "Н. Й. Вапцаров"',
  },
  -> event {
    (
      [
        'Градския парк, пред хотел Гардения',
        'площад "Н. Й. Вапцаров"',
        'Фоайето на читалището',
        'Читалището',
        'Барът в хотел Бъндерица',
      ].include?(event.location)
    ) or (
      [
        'хотел Гардения',
        'Голяма зала',
      ].include?(event.location) and event.daytime?
    )
  } => {
    background_color: 'ded8db',
    text_color: '747174',
    left: columns_left + narrow_column_width * 2 + column_spacing * 2,
    width: narrow_column_width,
    legend_name: 'Изложби, семинари, открити уроци и други',
    show_location_in_name: true,
  },
  -> event { event.location == 'Голяма зала' and not event.daytime? } => {
    background_color: 'F9E0BD',
    text_color: 'E5601E',
    left: columns_left,
    legend_name: 'Голяма зала на читалище "Н. Й. Вапцаров"',
  },
  -> event { event.location == 'хотел Гардения' and not event.daytime? } => {
    background_color: 'CDD0F9',
    text_color: '3274E5',
    left: columns_left,
    legend_name: 'Хотел Гардения, прожекции на нощно кино',
  },
}
start_hour  = [10, 0, 0]
hour_labels = {
  '10:00' => 2.0,
  '12:00' => 2.0,
  '14:00' => 2.0,
  '16:00' => 2.0,
  '18:00' => 2.0,
  '20:00' => 2.0,
  '22:00' => 2.0,
  '00:00' => 0.5,
}

Prawn::Document.generate(output_file, page_size: [297.64 + 2 * print_margins, 419.53 + 2 * print_margins], page_layout: :portrait, margin: print_margins) do
  if print_margins > 0
    repeat(:all) do
      stroke_color print_border_color
      line_width 1
      stroke_rectangle [bounds.left - 1, bounds.top + 1], bounds.width + 2, bounds.height + 2
    end
  end

  font_families.update 'Helvetica' => {
    normal:      {file: font_path, font: 'Helvetica'},
    italic:      {file: font_path, font: 'Helvetica-Italic'},
    bold:        {file: font_path, font: 'Helvetica-Bold'},
    bold_italic: {file: font_path, font: 'Helvetica-BoldItalic'},
  }
  font main_font, size: 8
  fill_color main_text_color

  # Frontpage
  image "#{root_path}/images/frontpage.jpg", fit: [bounds.width, bounds.height],
                                            position: :center,
                                            vposition: :center

  # First page
  start_new_page margin: 20 + print_margins
  move_down 20
  font main_font, size: 20, style: :bold do
    fill_color 'CCC6C5'
    text 'Банско Филм Фест 2012', leading: 6
    fill_color main_text_color
    text 'ПРОГРАМА'
  end

  # Legend
  move_down 150
  font main_font, size: 14 do
    fill_color main_text_color
    text 'Легенда'
  end
  move_down 10
  font main_font, size: 10 do
    event_columns.each do |_, css|
      fill_color css[:background_color]
      fill_rounded_rectangle [0, cursor + 1], 10, 10, 2

      fill_color css[:text_color]
      indent(17) { text css[:legend_name], leading: 4 }
    end
  end

  # Notes
  move_down 30
  fill_color main_text_color
  text 'В програмата са посочени началните часове на всяко събитие. Организаторите си запазват правото за промени и размествания. Програмата е достъпна и в електронен вид на адрес:', leading: 3
  text 'http://banskofilmfest.com/schedule-2012/', link: 'http://banskofilmfest.com/schedule-2012/', color: '3274E5'

  schedule.sort_by(&:starts_at).group_by(&:date).each_with_index do |(date, day_events), date_index|
    # Give numbers to the events
    day_events.reject(&:coffee_break?).each_with_index do |event, event_index|
      event.number = event_index + 1
    end

    day_starts_at = Time.new date.year, date.month, date.day, *start_hour

    # Visual event bubbles page
    start_new_page margin: 20 + print_margins

    # Weekday for the page title
    move_up 5
    fill_color main_text_color
    text "<b>#{weekday_for date}</b>, #{date.day}<sup>-#{day_suffix_for date.day}</sup>", inline_format: true, size: 12, align: :center
    move_down 15

    columns_top = cursor

    # Hours
    fill_color hours_color
    top_offset = columns_top
    hour_labels.each do |hour_label, duration|
      hour_box_height   = duration * hour_height
      hour_label_height = height_of hour_label
      bounding_box([0, top_offset + hour_label_height / 2], width: hour_column_width, height: hour_box_height) do
        text hour_label
      end

      line_width 1
      stroke_color hour_lines_color
      dash 2
      stroke_horizontal_line columns_left, bounds.right, at: top_offset
      undash

      top_offset -= hour_box_height
    end

    # Events
    event_columns.each do |filter, css|
      css[:width] ||= bounds.right - css[:left]

      # Group events if needed so that no event box
      # will be shorter than min_event_height
      combined_events = combine_events_in_boxes(self, day_events.select(&filter), hour_height, min_event_height)

      combined_events.each do |events|
        event_box_height = events.map { |event| event.duration / 3600.0 * hour_height }.reduce(:+)
        top_offset       = columns_top - (events.first.starts_at - day_starts_at) / 3600.0 * hour_height
        coffee_break     = events.all?(&:coffee_break?)

        unless coffee_break
          # Draw boxes
          fill_color css[:background_color]
          stroke_color css[:text_color]
          line_width 2

          box_rectangle = [css[:left], top_offset], css[:width], event_box_height, 3

          stroke_rounded_rectangle *box_rectangle
          fill_rounded_rectangle *box_rectangle
          fill_color css[:text_color]
        end

        bounding_box([css[:left], top_offset], width: css[:width], height: event_box_height) do
          unless coffee_break
            events_and_start_times = events.map do |event|
              if css[:width] > 150
                "<b>#{event.number}</b> — #{event.starts_at.strftime('%H:%M')}, #{event.name}"
              else
                "<b>#{event.number}</b> — #{event.starts_at.strftime('%H:%M')}"
              end
            end.join('<br>')

            text_box events_and_start_times,
                     at: [event_padding, bounds.top - event_padding],
                     width: css[:width] - 2 * event_padding,
                     height: event_box_height - 2 * event_padding,
                     inline_format: true,
                     align: :center,
                     valign: :center,
                     overflow: :shrink_to_fit
          end
        end
      end
    end

    # Detailed events page
    start_new_page margin: 10 + print_margins

    fill_color main_text_color
    text "#{page_number}", align: :right
    move_down 10

    day_events.reject(&:coffee_break?).each do |event|
      _, css = event_columns.find { |condition, css| condition.call(event) }
      next unless css

      event_number = sprintf('% 2s.', event.number).gsub ' ', Prawn::Text::NBSP
      event_time   = event.starts_at.strftime('%H:%M')
      event_info   = "#{event.name} (#{event.location})"

      fill_color css[:text_color]
      text_box event_number, at: [0, cursor], width: 15, align: :right
      text_box event_time,   at: [20, cursor], width: 25, style: :bold
      text_box event_info,   at: [50, cursor], width: bounds.right - 50, leading: 2
      move_down height_of(event_info, width: bounds.right - 50, leading: 2)
    end

  end

  # Sponsors
  start_new_page margin: 10 + print_margins
  image "#{root_path}/images/sponsors.jpg", fit: [bounds.width - 20 - 2 * print_margins, bounds.height - 20 - 2 * print_margins],
                                            position: :center,
                                            vposition: :center
end

puts "Generated #{output_file}"
