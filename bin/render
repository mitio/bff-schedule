#!/usr/bin/env ruby
# encoding: utf-8

require 'rubygems'
require 'bundler/setup'
require 'prawn'
require_relative '../helpers'
require_relative '../schedule'

if ARGV.size < 2
  puts "Usage: #{__FILE__} path-to-schedule.csv path-to-output.pdf"
  exit 1
end

input_file, output_file = ARGV
schedule = Schedule.new input_file
root_path = File.expand_path('../..', __FILE__)

# Settings
main_font          = "#{root_path}/fonts/DejaVuSans.ttf"
hour_height        = 37
hour_column_width  = 40
event_column_width = 150
min_event_height   = 15
column_spacing     = 10
event_columns      = {
  -> event { event.location == 'Тържествена зала' } => {
    background_color: 'EFACB2',
    text_color: 'B71C16',
    left: 50,
    width: 150,
  },
  -> event { event.location == 'Заседателна зала' } => {
    background_color: 'C0FCC3',
    text_color: '4DB818',
    left: 210,
    width: 150,
  },
  -> event { event.location == 'Голяма зала' } => {
    background_color: 'F9E0BD',
    text_color: 'E5601E',
    left: 50,
    width: 310,
  },
  -> event { event.location == 'хотел Гардения' } => {
    background_color: 'CDD0F9',
    text_color: '3274E5',
    left: 50,
    width: 310,
  },
}
start_hour  = [10, 30, 0]
hour_labels = {
  '10:30' => 1.5,
  '12:00' => 1.5,
  '13:30' => 3.5,
  '17:00' => 3.0,
  '20:00' => 2.0,
  '22:00' => 2.0,
  '00:00' => 0.5,
}

Prawn::Document.generate(output_file, page_size: 'A5', page_layout: :portrait) do
  font main_font, size: 10

# TODO
  # First page
  # font main_font, size: 20, style: :bold do
  #   text 'Банско филм фест', align: :center
  #   text '2012', align: :center
  # end

  schedule.sort_by(&:starts_at).group_by(&:date).each_with_index do |(date, day_events), i|
    start_new_page margin: 10 if i > 0
    text "#{weekday_for date}, #{date.day}-и"

    move_down 10
    columns_top = cursor
    day_starts_at = Time.new date.year, date.month, date.day, *start_hour

    # Hours
    top_offset = columns_top
    hour_labels.each do |hour_label, duration|
      hour_box_height = duration * hour_height
      bounding_box([0, top_offset], width: hour_column_width, height: hour_box_height) do
        text hour_label
      end
      top_offset -= hour_box_height
    end

    # Events
    event_columns.each do |filter, css|
      # Group events if needed so that no event box
      # will be shorter than min_event_height
      combined_events = combine_events_in_boxes(self, day_events.select(&filter), hour_height, min_event_height)

      combined_events.each do |events|
        event_box_height = events.map { |event| event.duration / 3600.0 * hour_height }.reduce(:+)
        top_offset       = columns_top - (events.first.starts_at - day_starts_at) / 3600.0 * hour_height
        coffee_break     = events.all?(&:coffee_break?)

        unless coffee_break
          # Draw boxes
          fill_color css[:background_color]
          stroke_color css[:text_color]
          self.line_width = 2

          box_rectangle = [css[:left], top_offset], css[:width], event_box_height, 3

          stroke_rounded_rectangle *box_rectangle
          fill_rounded_rectangle *box_rectangle
          fill_color css[:text_color]
        end

        bounding_box([css[:left], top_offset], width: css[:width], height: event_box_height) do
          text events.map(&:name).join(', '), size: 7 unless coffee_break
        end
      end
    end
  end

  # Sponsors
  start_new_page
  image "#{root_path}/images/sponsors.png", fit: [bounds.width - 20, bounds.height - 20],
                                            position: :center,
                                            vposition: :center
end

puts "Generated #{output_file}"
